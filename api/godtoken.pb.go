// Code generated by protoc-gen-go. DO NOT EDIT.
// source: godtoken.proto

/*
Package godtoken is a generated protocol buffer package.

It is generated from these files:
	godtoken.proto

It has these top-level messages:
	GetTokenReq
	GetTokenRes
	VerifyReq
	VerifyRes
*/
package godtoken

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTokenReq struct {
	Rid string `protobuf:"bytes,1,opt,name=rid" json:"rid,omitempty"`
}

func (m *GetTokenReq) Reset()                    { *m = GetTokenReq{} }
func (m *GetTokenReq) String() string            { return proto.CompactTextString(m) }
func (*GetTokenReq) ProtoMessage()               {}
func (*GetTokenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetTokenReq) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

type GetTokenRes struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetTokenRes) Reset()                    { *m = GetTokenRes{} }
func (m *GetTokenRes) String() string            { return proto.CompactTextString(m) }
func (*GetTokenRes) ProtoMessage()               {}
func (*GetTokenRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTokenRes) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyReq struct {
	Rid   string `protobuf:"bytes,1,opt,name=rid" json:"rid,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *VerifyReq) Reset()                    { *m = VerifyReq{} }
func (m *VerifyReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyReq) ProtoMessage()               {}
func (*VerifyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerifyReq) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

func (m *VerifyReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerifyRes struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *VerifyRes) Reset()                    { *m = VerifyRes{} }
func (m *VerifyRes) String() string            { return proto.CompactTextString(m) }
func (*VerifyRes) ProtoMessage()               {}
func (*VerifyRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerifyRes) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*GetTokenReq)(nil), "godtoken.GetTokenReq")
	proto.RegisterType((*GetTokenRes)(nil), "godtoken.GetTokenRes")
	proto.RegisterType((*VerifyReq)(nil), "godtoken.VerifyReq")
	proto.RegisterType((*VerifyRes)(nil), "godtoken.VerifyRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	out := new(GetTokenRes)
	err := grpc.Invoke(ctx, "/godtoken.Service/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error) {
	out := new(VerifyRes)
	err := grpc.Invoke(ctx, "/godtoken.Service/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error)
	Verify(context.Context, *VerifyReq) (*VerifyRes, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godtoken.Service/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godtoken.Service/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "godtoken.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Service_GetToken_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Service_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "godtoken.proto",
}

func init() { proto.RegisterFile("godtoken.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcf, 0x4f, 0x29,
	0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xe4,
	0xb9, 0xb8, 0xdd, 0x53, 0x4b, 0x42, 0x40, 0xec, 0xa0, 0xd4, 0x42, 0x21, 0x01, 0x2e, 0xe6, 0xa2,
	0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x49, 0x19, 0x59, 0x41, 0xb1,
	0x90, 0x08, 0x17, 0x2b, 0x58, 0x23, 0x54, 0x09, 0x84, 0xa3, 0x64, 0xcc, 0xc5, 0x19, 0x96, 0x5a,
	0x94, 0x99, 0x56, 0x89, 0xd5, 0x0c, 0x84, 0x26, 0x26, 0x64, 0x4d, 0xd2, 0x08, 0x4d, 0xc5, 0x42,
	0x7c, 0x5c, 0x4c, 0xf9, 0xd9, 0x60, 0x3d, 0x1c, 0x41, 0x4c, 0xf9, 0xd9, 0x46, 0xe5, 0x5c, 0xec,
	0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x16, 0x5c, 0x1c, 0x30, 0x17, 0x08, 0x89, 0xea,
	0xc1, 0x7d, 0x82, 0xe4, 0x6c, 0x29, 0xac, 0xc2, 0xc5, 0x42, 0x46, 0x5c, 0x6c, 0x10, 0x1b, 0x84,
	0x84, 0x11, 0x0a, 0xe0, 0x0e, 0x95, 0xc2, 0x22, 0x58, 0x9c, 0xc4, 0x06, 0x0e, 0x21, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x91, 0x94, 0x17, 0x66, 0x33, 0x01, 0x00, 0x00,
}
